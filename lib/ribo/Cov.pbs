#!/bin/bash
#
# To determine coverage in real genes. BEDTools is not suitable here
# (yet) because of the spliced genes and double-counting.
#
#PBS -j oe
#PBS -V
#PBS -o $OUTFILE.log

# reads from: OUTPUT_BAM
# writes to: COVERAGE_FILE, NULLCOV_FILE

cd $PBS_O_WORKDIR

. $LIB_DIR/load_opts $CONFIG

GTFBASE=$(base_form $HG19_UNIFIED_GTF .gtf)
output_sam=${OUTPUT_BAM%%.bam}".sam"

COVERAGE_FILE="$OUTPUT_DIR/"$BASE"__"$GTFBASE".reads"
NULLCOV_FILE="$OUTPUT_DIR/${BASE}__random.reads"

log_info "Mapping coverage to genes in $HG19_UNIFIED_GTF"
log_output "Writing coverage to $COVERAGE_FILE"

[ ! -f "$OUTPUT_BAM" ] && { error_exit "Could not find $OUTPUT_BAM"; }

samtools view -h -q 1 -F 4 $OUTPUT_BAM > $output_sam || { error_exit "Could not generate $output_sam"; }
p_htseq_count $output_sam $HG19_UNIFIED_GTF --type=$GTFBASE -s no -q > $COVERAGE_FILE || { error_exit "HTSeq-count failed."; }
rm -f $output_sam


# Turns out that Tophat sucks! All MQ = 255 and it aligns reads to transcripts not in my reference
# and doesn't obey the anchor mismatch count, so for random regions, and because we're also looking
# at random regions that should not be spliced anyway, use only the genome alignment by some
# read filtering trickier. Long term should adapt to read groups for genome and transcriptome
# alignments, allowing us to more easily use one or the other or both

#cat $GTF | coverageBed -abam $BAMFILE -b stdin -split -counts | cut -f 1-10 > $outfile
log_output "Writing randomized coverage to $NULLCOV_FILE"

samtools view -h -q 1 $OUTPUT_BAM | awk '($5<255)' | samtools view -bhS - | coverageBed -abam stdin -b $HG19_NULL_GTF -split -counts | cut -f 1-10 > $NULLCOV_FILE

log_info "Done!"
